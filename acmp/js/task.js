/*
http://acmp.ru/index.asp?main=task&id_task=417
Даты 

(Время: 1 сек. Память: 16 Мб Сложность: 34%)
При обработке различной информации часто приходится оперировать с данными о датах. В этой задаче вам нужно составить программу, которая сможет вывести число, месяц и день недели, которые наступят через K дней, начиная с первого января 2008 года.
Напомним, что это был вторник.

Входные данные

Входной файл INPUT.TXT содержит одно целое число K (0 <= K <= 1000) - количество дней, после первого января, через которое наступит (или наступила) интересующая дата.

Выходные данные

В выходной файл OUTPUT.TXT ваша программа должна записать, какие день недели, число и месяц наступят по прошествии заданного времени. Результаты проверяются автоматически, поэтому вам следует придерживаться формата, показанного в примерах.

Примеры

№	INPUT.TXT	OUTPUT.TXT
1	0	Tuesday, 01.01
2	5	Sunday, 06.01
Примечание

По-английски дни недели называются так: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday.
*/
function dateShift(k)
{
    var sourseK = k;
    function getDaysCount(year)
    {
        if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
            return 366;
        else
            return 365;
    }

    var y = 2008, m = 1, d = 1, count, i;
    while (k > (count = getDaysCount(y))) //find year
    {
        k -= count; y++;
    }
    for (i = m; i <=12; ++i) //find month
    {
        switch(i)
        {
            case 1:
            case 3:
            case 5:
            case 7:
            case 8:
            case 10:
            case 12:
                count = 31;
                break;
            case 4:
            case 6:
            case 9:
            case 11:
                count = 30;
                break;
            case 2:
                count = getDaysCount(y) == 365 ? 28 : 29;
                break;
        }
        if (k >= count)
        {
            k -= count; m++;
        }
        else
        {
            break;
        }
    }
    d += k; //find day

    var res; //Make a result string
    switch (sourseK % 7)
    {
        case 0:
            res = "Tuesday"; break;
        case 1:
            res = "Wednesday"; break;
        case 2:
            res = "Thursday"; break;
        case 3:
            res = "Friday"; break;
        case 4:
            res = "Saturday"; break;
        case 5:
            res = "Sunday"; break;
        case 6:
            res = "Monday"; break;
    }
    res += ", " + (d > 9 ? d : "0" + d) + "." + (m > 9 ? m : "0" + m) + "." + y;
    return res;
}
//var shift = 1119758;
//var jsDate = new Date(2008, 0, 1); jsDate.setDate(jsDate.getDate() + shift);
//console.log(jsDate); console.log(dateShift(shift));



/*
http://acmp.ru/index.asp?main=task&id_task=668
Змей Горыныч

(Время: 1 сек. Память: 16 Мб Сложность: 34%)
В некотором царстве жил Змей Горыныч. У него было N голов и M хвостов. Иван-царевич решил уничтожить губителя человеческих душ, для чего ему его кума Баба Яга
подарила волшебный меч, так как только им можно убить Змея Горыныча.
Если отрубить одну голову, то на её месте вырастает новая,
если отрубить хвост, то вместо него вырастет 2 хвоста.
Если отрубить два хвоста, то вырастает 1 голова,
и только когда отрубить 2 головы, то не вырастет ничего.
Змей Горыныч гибнет только в том случае, когда ему отрубать все головы и все хвосты. Определить минимальное количество ударов мечом, нужное для уничтожения Змея Горыныча.

Входные данные

В единственной строке входного файла INPUT.TXT записаны через пробел два числа N, M (0 ≤ N, M ≤ 1000).

Выходные данные

В единственную строку выходного файла OUTPUT.TXT нужно вывести одно число – минимальное количество ударов мечом, или -1, если уничтожить Змея Горыныча невозможно.

Пример

№	INPUT.TXT	OUTPUT.TXT
1	3 3	9
*/

function Gorinich(h, t)
{
    var cnt = 0, buf;
    if (t == 0)
    {
        if (h % 2 != 0) return -1;
        else
            return h / 2;
    }
    while (t > 2)
    {
        t -= 2;
        h++;
        cnt++;
    };

    if (h % 2 == 0)
        { cnt += (4 - t); t = 4; }//При четном кол-ве голов нужно "вырастить" 4 хвоста
    else
        { cnt += (2 - t); t = 2;} //При нечетном кол-ве голов нужно "вырастить" 2 хвоста
    buf = t / 2;
    cnt += (buf + (h + buf)/2);
    return cnt;
}

//console.log(Gorinich(3, 3));
//console.log(Gorinich(4, 1));
//console.log(Gorinich(4, 3));




/*
http://acmp.ru/index.asp?main=task&id_task=285
Костер

(Время: 1 сек. Память: 16 Мб Сложность: 34%)
Во время военного похода на морского пехотинца Джо было возложено ответственное задание – развести костёр и поддерживать в нём огонь ровно m минут. Для этого у Джо есть спички и n поленьев, причём Джо известно точное время сгорания каждого полена.

Джо разжигает огонь в момент времени t = 0 и сразу бросает в него одно или несколько поленьев. Затем он должен подбрасывать в огонь новые поленья, не позволяя костру угаснуть (т.е. если последнее полено в костре догорает в момент времени t, то новое полено может быть брошено в огонь не позднее t – 1). Поленья, брошенные в огонь, загораются мгновенно. Одновременно Джо может бросить в огонь любое количество поленьев. Джо должен бросить в огонь все n поленьев.

Помогите Джо определить, сможет ли он подбрасывать поленья в огонь таким образом, чтобы костер горел ровно m минут.

Входные данные

Первая строка входного файла INPUT.TXT содержит целые числа n и m (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000) – количество поленьев и время, в течение которого Джо должен поддерживать огонь в костре. Вторая строка входного файла содержит n целых чисел a1, a2, ..., an, где ai (2 ≤ ai ≤ 1000) – время сгорания i-ого полена в минутах.

Выходные данные

В выходной файл OUTPUT.TXT выведите строку «yes», если Джо сможет поддерживать огонь в костре ровно m минут, и строку «no» в противном случае.

Примеры

№	INPUT.TXT	OUTPUT.TXT
1	3 7
2 3 5	yes
2	2 5
3 9	no
3	4 10
3 3 3 3	no
*/
function fireplace(n, m, ar)
{
    var i, maxTime = 0;
    for (i = 0; i < n; ++i)
        maxTime += ar[i];
    maxTime -= (n - 1); //Максимально долгое горение костра
    if ((maxTime < m) || (Math.max.apply(null,ar) > m))
        return "no";
    return "yes";
}
//console.log(fireplace(3, 7, [2,3,5]));
//console.log(fireplace(2, 5, [3, 9]));
//console.log(fireplace(4, 10, [3, 3, 3, 3]));




/*
http://acmp.ru/index.asp?main=task&id_task=169
Магазин

(Время: 1 сек. Память: 16 Мб Сложность: 34%)
На расстоянии N шагов от магазина стоит человек. Каждую минуту он выбирает, куда сделать шаг: к магазину или в противоположном направлении.

Требуется написать программу, которая определит, сколькими способами он может попасть в магазин, пройдя ровно K шагов и оказавшись в магазине только после выполнения последнего шага.

Входные данные

Входной файл INPUT.TXT содержит 2 числа n и k, записанные через пробел. Известно, что 1 <= N <= K <= 37.

Выходные данные

Выходной файл OUTPUT.TXT должен содержать одно число – количество способов попадания в магазин.

Примеры

№	INPUT.TXT	OUTPUT.TXT
1	2 4	2
2	5 5	1
*/

function shop(n, k)
{
    var cnt = 0;
    function recursion(n,k)
    {
        if (n == k) { cnt++; return; }
        if ((n-1 > 0) && (k-1 >0)) recursion(n - 1, k - 1); //Движемся к магазину
        if (n + 1 <= k - 1) recursion(n + 1, k - 1); //Движемся от магазина
    }
    recursion(n, k);
    return cnt;
}
//console.log(shop(2, 5));
//console.log(shop(2, 4));
//console.log(shop(5, 5));




/*
http://acmp.ru/index.asp?main=task&id_task=82
Пересечение множеств

(Время: 1 сек. Память: 16 Мб Сложность: 34%)
Даны два неупорядоченных набора целых чисел (может быть, с повторениями). Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.

Входные данные

В первой строке входного файла INPUT.TXT записано через пробел два целых числа N и М (1 ≤ N, М ≤ 300 000) — количество элементов первого и второго наборов, соответственно. В следующих строках записано сначала N чисел первого набора, а затем M чисел второго набора. Числа разделены пробелами или символами конца строки. Каждое из этих чисел попадает в промежуток от 0 до 105.

Выходные данные

В выходной файл OUTPUT.TXT нужно записать в возрастающем порядке без повторений все числа, которые входят как в первый, так и во второй набор. Числа разделять одним пробелом. Если таких чисел нет, то выходной файл должен оставаться пустым.

Пример

№	INPUT.TXT	OUTPUT.TXT
1	11 6
2 4 6 8 10 12 10 8 6 4 2
3 6 9 12 15 18	6 12
*/

function setCross(n,m, arN, arM)
{
    arN = arN.sort(function (a, b) { return a - b; });
    arM = arM.sort(function (a, b) { return a - b; });

    var lastIndex = 0, res = [];
    for (var i = 0; i < n; ++i)
    {
        lastIndex = arM.indexOf(arN[i], lastIndex + 1);
        if (lastIndex != -1)
            if ((res[res.length - 1] != arN[i]) || (res.length = 0))
                res.push(arN[i]);
    }
    return res;
}

console.log(setCross(11, 6, [2, 4, 6, 8, 10, 12, 10, 8, 6, 4, 2], [3, 6, 9, 12, 15, 18]));